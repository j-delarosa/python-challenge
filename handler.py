"""Service entry-point."""
import json
import logging

from service.dal import Project
from service.models import JSONManifest, JSONFactory


# Logging setup
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


# Lambda entry
def main(event, context=None):  # pylint: disable=unused-argument
    """Handle loandata as Eventbridge event and return report.

    The reports generated by the service have the following envelope:

    ```json
    {
        "reports": [
            {
                "title": "<the report title>",
                ...
            },
            ...
        ]
    }
    ```

    Parameters
    ----------
    event : dict
        The Eventbridge event payload with loandata for reporting as its detail.
    context : LambdaContext
        The lambda context object (for Lambda use only).

    Returns
    -------
    dict{str:any}
        Returns a dict which contains the reports generated by the service.

    """
    event = {} if event is None else event
    logger.info('Service invoked by event: %s', json.dumps(event, indent=2))

    # Load all rules
    project = Project()
    rules = [rule for _ in project.resources.values() for rule in _]
    logger.info('Service loaded rules: %s', json.dumps(rules, indent=2))

    # Confirm event is valid EventBridge -> SQS payload
    loans = []
    for record in event.get('Records', [{}]):

        if not all(
            key in record for key in ['source', 'detail-type', 'detail']
        ):
            logger.error(
                'Service received invalid EventBridge event- Skipping event'
            )
            continue

        # Attempt to load loandata
        try:
            loans.append(json.loads(record['detail']))
        except json.JSONDecodeError:
            logger.error(
                'Service received invalid event detail- Skipping event'
            )
            continue

    logger.info('Service recieved loans: %s', json.dumps(loans, indent=2))

    # Generate Manifests
    reports = []
    shared_address_borrower = []
    for loan in loans:
        applications = loan['applications']
        for application in range(len(applications)):
            borrower = applications[application]['borrower']
            coborrower = applications[application]['coborrower']
            shared_address_borrower.append({
                'borrower_name': borrower['firstName'] + ' ' + borrower['lastName'],
                'shared_address': borrower['mailingAddress'] == coborrower['mailingAddress']
            })

        manifest = JSONManifest(loan, rules)
        logger.info(
            'Generated manifest: %s', json.dumps(manifest.items, indent=2)
        )

        projection = JSONFactory(manifest).get_projection()
        logger.info(
            'Generated projection: %s', json.dumps(projection, indent=2)
        )

        reports.extend(projection.get('reports', []))

    # Use set to store value pairs based on the key and remove duplicate records in the iterable
    def delete_duplicate(residences, key=None):
        if key is None:
            key = lambda x: x
        flag = set()
        for residence in residences:
            k = key(residence)
            if k in flag:
                continue
            yield residence
            flag.add(k)

    # Reformat report output and return
    for report in reports:
        # Remove duplicate records for Residences Report -- Ticket [FTR] CC-01
        if report['title'] == 'Residences Report':
            report['residences'] = list(
                delete_duplicate(report['residences'], key=lambda d: (d['city'], d['state'], d['street'], d['zip'])))

        # insert shared_address to indicate if the borrower and
        # coborrower for a given application live together -- Ticket [FTR] CC-02
        elif report['title'] == 'Borrowers Report':
            borrowers_name = [borrower['first_name'] + ' ' + borrower['last_name'] for borrower in report['borrowers']]
            for borrower in shared_address_borrower:
                if borrower['borrower_name'] in borrowers_name:
                    report['shared_address'] = borrower['shared_address']

    return {'reports': reports}
